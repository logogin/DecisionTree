/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ModelPropertiesFrame.java
 *
 * Created on Dec 9, 2010, 4:42:42 PM
 */

package com.logogin.decisiontree.view;

import java.text.DecimalFormat;

import com.logogin.decisiontree.TreeAnalyzerApp;
import com.logogin.decisiontree.model.DecisionTreeModel;
import com.logogin.decisiontree.model.Rule;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;

/**
 *
 * @author pavel
 */
public class ModelPropertiesFrame extends javax.swing.JFrame {

    private TreeAnalyzerApp app;

    /** Creates new form ModelPropertiesFrame */
    public ModelPropertiesFrame() {
        initComponents();
    }

    public ModelPropertiesFrame(TreeAnalyzerApp app) {
        this.app = app;
        initComponents();
        postInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new JTabbedPane();
        jPanel1 = new JPanel();
        jScrollPane1 = new JScrollPane();
        rulesTable = new JTable();
        frequentRulesPanel = new JPanel();
        jScrollPane3 = new JScrollPane();
        frequentRulesTable = new JTable();
        relativeRulesPanel = new JPanel();
        jScrollPane4 = new JScrollPane();
        relativeRulesTable = new JTable();
        jPanel4 = new JPanel();
        jScrollPane2 = new JScrollPane();
        wekaTextPane = new JTextPane();

        setName("Form"); // NOI18N

        tabbedPane.setName("tabbedPane"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        rulesTable.setAutoCreateRowSorter(true);
        rulesTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Rule", "Class", "No. instances"
            }
        ) {
            Class[] types = new Class [] {
                Integer.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rulesTable.setName("rulesTable"); // NOI18N
        rulesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(rulesTable);
        ResourceMap resourceMap = Application.getInstance(TreeAnalyzerApp.class).getContext().getResourceMap(ModelPropertiesFrame.class);
        rulesTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        rulesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("rulesTable.columnModel.title0")); // NOI18N
        rulesTable.getColumnModel().getColumn(1).setPreferredWidth(500);
        rulesTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("rulesTable.columnModel.title1")); // NOI18N
        rulesTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        rulesTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("rulesTable.columnModel.title2")); // NOI18N
        rulesTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        rulesTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("rulesTable.columnModel.title3")); // NOI18N

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                .addComponent(jScrollPane1, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
        );

        tabbedPane.addTab(resourceMap.getString("jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        frequentRulesPanel.setName("frequentRulesPanel"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        frequentRulesTable.setAutoCreateRowSorter(true);
        frequentRulesTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Rule", "Class", "No. instances"
            }
        ) {
            Class[] types = new Class [] {
                Integer.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        frequentRulesTable.setName("frequentRulesTable"); // NOI18N
        frequentRulesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(frequentRulesTable);
        frequentRulesTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        frequentRulesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("frequentRulesTable.columnModel.title0")); // NOI18N
        frequentRulesTable.getColumnModel().getColumn(1).setPreferredWidth(500);
        frequentRulesTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("frequentRulesTable.columnModel.title1")); // NOI18N
        frequentRulesTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        frequentRulesTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("frequentRulesTable.columnModel.title2")); // NOI18N
        frequentRulesTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        frequentRulesTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("frequentRulesTable.columnModel.title3")); // NOI18N

        GroupLayout frequentRulesPanelLayout = new GroupLayout(frequentRulesPanel);
        frequentRulesPanel.setLayout(frequentRulesPanelLayout);
        frequentRulesPanelLayout.setHorizontalGroup(
            frequentRulesPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
            .addGroup(frequentRulesPanelLayout.createParallelGroup(Alignment.LEADING)
                .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE))
        );
        frequentRulesPanelLayout.setVerticalGroup(
            frequentRulesPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
            .addGroup(frequentRulesPanelLayout.createParallelGroup(Alignment.LEADING)
                .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
        );

        tabbedPane.addTab(resourceMap.getString("frequentRulesPanel.TabConstraints.tabTitle"), frequentRulesPanel); // NOI18N

        relativeRulesPanel.setName("relativeRulesPanel"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        relativeRulesTable.setAutoCreateRowSorter(true);
        relativeRulesTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Rule", "Class", "No. instances"
            }
        ) {
            Class[] types = new Class [] {
                Integer.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        relativeRulesTable.setName("relativeRulesTable"); // NOI18N
        relativeRulesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(relativeRulesTable);
        relativeRulesTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        relativeRulesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("relativeRulesTable.columnModel.title0")); // NOI18N
        relativeRulesTable.getColumnModel().getColumn(1).setPreferredWidth(500);
        relativeRulesTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("relativeRulesTable.columnModel.title1")); // NOI18N
        relativeRulesTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        relativeRulesTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("relativeRulesTable.columnModel.title2")); // NOI18N
        relativeRulesTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        relativeRulesTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("relativeRulesTable.columnModel.title3")); // NOI18N

        GroupLayout relativeRulesPanelLayout = new GroupLayout(relativeRulesPanel);
        relativeRulesPanel.setLayout(relativeRulesPanelLayout);
        relativeRulesPanelLayout.setHorizontalGroup(
            relativeRulesPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
            .addGroup(relativeRulesPanelLayout.createParallelGroup(Alignment.LEADING)
                .addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE))
        );
        relativeRulesPanelLayout.setVerticalGroup(
            relativeRulesPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
            .addGroup(relativeRulesPanelLayout.createParallelGroup(Alignment.LEADING)
                .addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
        );

        tabbedPane.addTab(resourceMap.getString("relativeRulesPanel.TabConstraints.tabTitle"), relativeRulesPanel); // NOI18N

        jPanel4.setName("jPanel4"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        wekaTextPane.setName("wekaTextPane"); // NOI18N
        jScrollPane2.setViewportView(wekaTextPane);

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
        );

        tabbedPane.addTab(resourceMap.getString("jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                .addComponent(tabbedPane, GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 389, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                .addComponent(tabbedPane, GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void postInitComponents() {
    }

    public void setTreeModel(String treeModelId, Double scoreThreshold, Double coverageThreshold) {
        DecisionTreeModel treeModel = app.getController().getTreeModel(treeModelId);
        setTitle("Properties of " + treeModel.getName() + " (" + treeModelId + ")");

        DefaultTableModel rulesTableModel = (DefaultTableModel)rulesTable.getModel();
        rulesTableModel.setRowCount(0);
        int i = 1;
        DecimalFormat format = new DecimalFormat("#,##0.0#");
        for ( Rule rule : treeModel.getRules() ) {
            rulesTableModel.addRow(
                    new Object[] {i++
                            , rule.getExpression()
                            , app.getController().getClassValueAlias(rule.getScore())
                            , format.format(rule.getRecordCount()) + "/" + format.format(rule.getRecordCount() - rule.getScoreRecordCount())});
        }

        tabbedPane.setTitleAt(1, "Frequent rules (" + scoreThreshold + ")");
        DefaultTableModel frequentRulesTableModel = (DefaultTableModel)frequentRulesTable.getModel();
        frequentRulesTableModel.setRowCount(0);
        i = 1;
        for ( Rule rule : treeModel.getFrequentRules(scoreThreshold) ) {
            frequentRulesTableModel.addRow(
                    new Object[] {i++
                            , rule.getExpression()
                            , app.getController().getClassValueAlias(rule.getScore())
                            , format.format(rule.getRecordCount()) + "/" + format.format(rule.getRecordCount() - rule.getScoreRecordCount())});
        }

        tabbedPane.setTitleAt(2, "Relative rules (" + coverageThreshold * 100 + ")");
        DefaultTableModel relativeRulesTableModel = (DefaultTableModel)relativeRulesTable.getModel();
        relativeRulesTableModel.setRowCount(0);
        i = 1;
        for ( Rule rule : treeModel.getRelativeRules(coverageThreshold) ) {
            relativeRulesTableModel.addRow(
                    new Object[] {i++
                            , rule.getExpression()
                            , app.getController().getClassValueAlias(rule.getScore())
                            , format.format(rule.getRecordCount()) + "/" + format.format(rule.getRecordCount() - rule.getScoreRecordCount())});
        }

        wekaTextPane.setText(treeModel.dumpWekaTree().toString());
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModelPropertiesFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel frequentRulesPanel;
    private JTable frequentRulesTable;
    private JPanel jPanel1;
    private JPanel jPanel4;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JScrollPane jScrollPane4;
    private JPanel relativeRulesPanel;
    private JTable relativeRulesTable;
    private JTable rulesTable;
    private JTabbedPane tabbedPane;
    private JTextPane wekaTextPane;
    // End of variables declaration//GEN-END:variables

}
