/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ModelsTabPanel.java
 *
 * Created on Nov 27, 2010, 6:56:52 PM
 */

package com.logogin.decisiontree.panel;

import com.logogin.decisiontree.TreeAnalyzerApp;
import com.logogin.decisiontree.TreeAnalyzerView;
import com.logogin.decisiontree.model.TreeModelsTableModel;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ActionMap;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;

/**
 *
 * @author pavel
 */
public class ModelsTabPanel extends javax.swing.JPanel {

    private TreeAnalyzerApp app;

    /** Creates new form ModelsTabPanel */
    public ModelsTabPanel() {
        app = TreeAnalyzerApp.getApplication();
        initComponents();
        postInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        scoreThresholdText = new JTextField();
        jLabel2 = new JLabel();
        coverageThresholdText = new JTextField();
        jScrollPane1 = new JScrollPane();
        modelsTable = new JTable();
        jScrollPane2 = new JScrollPane();
        rulesTable = new JTable();
        jButton1 = new JButton();

        setName("Form"); // NOI18N

        ResourceMap resourceMap = Application.getInstance(TreeAnalyzerApp.class).getContext().getResourceMap(ModelsTabPanel.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        scoreThresholdText.setText(resourceMap.getString("scoreThresholdText.text")); // NOI18N
        scoreThresholdText.setName("scoreThresholdText"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        coverageThresholdText.setText(resourceMap.getString("coverageThresholdText.text")); // NOI18N
        coverageThresholdText.setName("coverageThresholdText"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        modelsTable.setModel(new TreeModelsTableModel(app.getController().getClassValuesCount(), app.getController().getColumnIdentifiers(Double.valueOf(coverageThresholdText.getText()))));
        modelsTable.setName("modelsTable"); // NOI18N
        modelsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(modelsTable);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        rulesTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Rule", "Class value", "No. of instances"
            }
        ) {
            Class[] types = new Class [] {
                Integer.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rulesTable.setName("rulesTable"); // NOI18N
        jScrollPane2.setViewportView(rulesTable);
        rulesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("rulesTable.columnModel.title0")); // NOI18N
        rulesTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("rulesTable.columnModel.title1")); // NOI18N
        rulesTable.getColumnModel().getColumn(2).setResizable(false);
        rulesTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("rulesTable.columnModel.title2")); // NOI18N
        rulesTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("rulesTable.columnModel.title3")); // NOI18N

        ActionMap actionMap = Application.getInstance(TreeAnalyzerApp.class).getContext().getActionMap(ModelsTabPanel.class, this);
        jButton1.setAction(actionMap.get("recalculateAction")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jScrollPane1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(scoreThresholdText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(coverageThresholdText, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jButton1)))))
                .addContainerGap())
        );

        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {coverageThresholdText, scoreThresholdText});

        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(scoreThresholdText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(coverageThresholdText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 147, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void postInitComponents() {
        //app.getController().setColumnIdentifiers((TreeModelsTableModel)modelsTable.getModel());
        modelsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                modelsTableValueChanged(e);
            }
        });
    }

    @Action
    public void recalculateAction() {
        Double scoreThreshold = Double.valueOf(scoreThresholdText.getText());
        Double coverageThreshold = Double.valueOf(coverageThresholdText.getText())/100.0;
        app.getController().recalculateTreeModelsTable(scoreThreshold, coverageThreshold
                , ((TreeAnalyzerView)app.getMainView()).getOverviewTableModel()
                , (TreeModelsTableModel)modelsTable.getModel());
    }

    private void modelsTableValueChanged(ListSelectionEvent e) {
        app.getController().updateTreeModelRulesTable(e.getFirstIndex()
                , (TreeModelsTableModel)modelsTable.getModel()
                , (DefaultTableModel)rulesTable.getModel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField coverageThresholdText;
    private JButton jButton1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTable modelsTable;
    private JTable rulesTable;
    private JTextField scoreThresholdText;
    // End of variables declaration//GEN-END:variables

}
