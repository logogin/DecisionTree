/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OverviewTabPanel.java
 *
 * Created on Nov 27, 2010, 6:56:14 PM
 */

package com.logogin.decisiontree.panel;

import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.logogin.decisiontree.TreeAnalyzerApp;
import com.logogin.decisiontree.TreeAnalyzerView;
import com.logogin.decisiontree.model.DecisionTreeModel;
import com.logogin.decisiontree.model.JAXBUtil;
import com.logogin.decisiontree.model.OverviewTableModel;
import com.logogin.decisiontree.model.event.AliasChangeEvent;
import com.logogin.decisiontree.model.event.AliasChangeListener;
import com.logogin.decisiontree.model.event.ModelChangeEvent;
import com.logogin.decisiontree.model.event.ModelChangeListener;

import javax.swing.ActionMap;
import javax.swing.DebugGraphics;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.Task;

/**
 *
 * @author pavel
 */
public class OverviewTabPanel extends javax.swing.JPanel {

    private TreeAnalyzerApp app;

    /** Creates new form OverviewTabPanel */
    public OverviewTabPanel() {
        app = TreeAnalyzerApp.getApplication();
        initComponents();
        postInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modelFileChooser = new JFileChooser();
        jScrollPane1 = new JScrollPane();
        overviewTable = new JTable();
        jButton1 = new JButton();
        jButton2 = new JButton();
        jScrollPane2 = new JScrollPane();
        dataFieldAliasesTable = new JTable();

        modelFileChooser.setFileFilter(new FileNameExtensionFilter("PMML model files (*.pmml)", "pmml"));
        modelFileChooser.setMultiSelectionEnabled(true);
        modelFileChooser.setName("modelFileChooser"); // NOI18N

        setDebugGraphicsOptions(DebugGraphics.NONE_OPTION);
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        overviewTable.setAutoCreateRowSorter(true);
        overviewTable.setModel(new OverviewTableModel());
        overviewTable.setName("overviewTable"); // NOI18N
        overviewTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(overviewTable);
        ResourceMap resourceMap = Application.getInstance(TreeAnalyzerApp.class).getContext().getResourceMap(OverviewTabPanel.class);
        overviewTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("overviewTable.columnModel.title0")); // NOI18N
        overviewTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("overviewTable.columnModel.title1")); // NOI18N
        overviewTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("overviewTable.columnModel.title2")); // NOI18N

        ActionMap actionMap = Application.getInstance(TreeAnalyzerApp.class).getContext().getActionMap(OverviewTabPanel.class, this);
        jButton1.setAction(actionMap.get("loadModelsAction")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("unloadAllAction")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        dataFieldAliasesTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data field", "Class value", "Alias"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataFieldAliasesTable.setName("dataFieldAliasesTable"); // NOI18N
        dataFieldAliasesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(dataFieldAliasesTable);
        dataFieldAliasesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("dataFieldAliasesTable.columnModel.title0")); // NOI18N
        dataFieldAliasesTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("dataFieldAliasesTable.columnModel.title1")); // NOI18N
        dataFieldAliasesTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("dataFieldAliasesTable.columnModel.title2")); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void postInitComponents() {
        app.getController().initDataFieldAliases();
        initAliasesTable();
        app.getController().addModelChangeListener(new ModelChangeListener() {
            @Override
            public void modelChanged(ModelChangeEvent e) {
                if ( ModelChangeEvent.MODEL_ADDED == e.getType() ) {
                    ((OverviewTableModel)overviewTable.getModel()).addTreeModel(e.getTreeModel());
                }
            }
        });
        //app.getController().initDataFieldAliases((DefaultTableModel)dataFieldAliasesTable.getModel());
        dataFieldAliasesTable.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if ( TableModelEvent.INSERT == e.getType() || TableModelEvent.UPDATE == e.getType() ) {
                    TableModel tableModel = (TableModel)e.getSource();
                    int rowIndex = e.getFirstRow();
                    app.getController().setDataFieldAlias((String)tableModel.getValueAt(rowIndex, 0)
                            , (String)tableModel.getValueAt(rowIndex, 1)
                            , (String)tableModel.getValueAt(rowIndex, 2));
//                    String value = tableModel.getValueAt(rowIndex, 0) + "." + tableModel.getValueAt(rowIndex, 1);
//                    String alias = (String)tableModel.getValueAt(rowIndex, 2);
//                    dataFieldAliases.put(value, alias);
                }
//                app.getController().onDataFieldAliasesTableChanged(e);
            }
        });

        overviewTable.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if ( (TableModelEvent.UPDATE == e.getType() && 0 == e.getColumn()) || TableModelEvent.INSERT == e.getType() ) {
                    OverviewTableModel tableModel = (OverviewTableModel)e.getSource();
                    int rowIndex = e.getFirstRow();
                    app.getController().setTreeModelEnabled(tableModel.getTreeModelId(rowIndex)
                            , tableModel.getTreeModelEnabled(rowIndex));
                    //((TreeAnalyzerView)app.getMainView()).updateCompareTabModels();
                }
            }
        });

//        Dimension tableDim = overviewTable.getPreferredSize();
//
//        double[] percentages = new double[] {0.1, 0.8, 0.1};
//        double total = 0;
//
//        for (int i = 0; i < overviewTable.getColumnModel().getColumnCount(); i++)
//        {
//            total += percentages[i];
//        }
//
//        for (int i = 0; i < overviewTable.getColumnModel().getColumnCount(); i++)
//        {
//            TableColumn column = overviewTable.getColumnModel().getColumn(i);
//            column.setPreferredWidth(
//                 (int)(tableDim.width * (percentages[i] / total)));
//        }
//
//        overviewTable.getColumnModel().getColumn(0).setMinWidth(10);
//        overviewTable.getColumnModel().getColumn(0).setMaxWidth(30);

    }

    private void initAliasesTable() {
        DefaultTableModel dataFieldAliasesTableModel = (DefaultTableModel)dataFieldAliasesTable.getModel();
        for ( Map.Entry<String, String> entry : app.getController().getDataFieldAliases().entrySet() ) {
            String[] parts = entry.getKey().split("\\.");
            dataFieldAliasesTableModel.addRow(new Object[]{parts[0], parts[1], entry.getValue()});
        }
    }

    @Action()
    public Task<List<DecisionTreeModel>, DecisionTreeModel> loadModelsAction() {
        if ( JFileChooser.APPROVE_OPTION == modelFileChooser.showOpenDialog(app.getMainFrame()) ) {
            return new LoadModelsActionTask(app);
        }
        return null;
    }

    private class LoadModelsActionTask extends Task<List<DecisionTreeModel>, DecisionTreeModel> {
        LoadModelsActionTask(Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to LoadModelsActionTask fields, here.
            super(app);
        }

        @Override
        protected List<DecisionTreeModel> doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            //OverviewTableModel overviewTreeModel = (OverviewTableModel)overviewTable.getModel();
            int i = 0;
            List<DecisionTreeModel> result = new ArrayList<DecisionTreeModel>();
            float percent = 1.0f / modelFileChooser.getSelectedFiles().length;
            setMessage("Loading models...");
            for ( File file : modelFileChooser.getSelectedFiles() ) {
                try {
                    setMessage("Processing model " + file.getAbsolutePath());
                    DecisionTreeModel treeModel = new DecisionTreeModel(file.getAbsolutePath(), file.getName(), JAXBUtil.unmarshal(file, true));
                    result.add(treeModel);
                    //app.getController().addTreeModel(treeModel);
                    setProgress(percent * ++i);
                } catch (Exception ex) {
                    setMessage("Error");
                    ex.printStackTrace();
                    cancel(true);
                }
            }
            return result;  // return your result
        }

        @Override
        protected void succeeded(List<DecisionTreeModel> result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
            for ( DecisionTreeModel treeModel : result ) {
                app.getController().addTreeModel(treeModel);
            }
            //((TreeAnalyzerView)app.getMainView()).onLoadModelsSuccess();
        }
    }

    @Action
    public void unloadAllAction() {
        app.getController().unloadTreeModels();
    }

    public OverviewTableModel getOverviewTableModel() {
        return (OverviewTableModel)overviewTable.getModel();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTable dataFieldAliasesTable;
    private JButton jButton1;
    private JButton jButton2;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JFileChooser modelFileChooser;
    private JTable overviewTable;
    // End of variables declaration//GEN-END:variables

}
