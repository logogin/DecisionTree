/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CompareTabPanel.java
 *
 * Created on Nov 27, 2010, 6:57:22 PM
 */

package com.logogin.decisiontree.panel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.HashSet;
import java.util.Set;

import com.logogin.decisiontree.TreeAnalyzerApp;
import com.logogin.decisiontree.TreeAnalyzerView;
import com.logogin.decisiontree.model.ComboBoxItem;
import com.logogin.decisiontree.model.DecisionTreeModel;
import com.logogin.decisiontree.model.Rule;
import com.logogin.decisiontree.model.event.AliasChangeEvent;
import com.logogin.decisiontree.model.event.AliasChangeListener;
import com.logogin.decisiontree.model.event.ModelChangeEvent;
import com.logogin.decisiontree.model.event.ModelChangeListener;

import javax.swing.ActionMap;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;

/**
 *
 * @author pavel
 */
public class CompareTabPanel extends javax.swing.JPanel {

    private TreeAnalyzerApp app;

    /** Creates new form CompareTabPanel */
    public CompareTabPanel() {
        app = TreeAnalyzerApp.getApplication();
        initComponents();
        postInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataFieldsComboBox = new JComboBox();
        jScrollPane1 = new JScrollPane();
        ignoredFiltersTable = new JTable();
        jLabel1 = new JLabel();
        jButton1 = new JButton();
        leftModelComboBox = new JComboBox();
        rightModelComboBox = new JComboBox();
        jSplitPane1 = new JSplitPane();
        jScrollPane2 = new JScrollPane();
        leftRulesTable = new JTable();
        jScrollPane3 = new JScrollPane();
        rightRulesTable = new JTable();

        dataFieldsComboBox.setName("dataFieldsComboBox"); // NOI18N

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        ignoredFiltersTable.setModel(new DefaultTableModel(
            new Object [][] {
                {new Boolean(false), ""}
            },
            new String [] {
                "Enabled", "Data field"
            }
        ) {
            Class[] types = new Class[]{Boolean.class, String.class};

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ignoredFiltersTable.setName("ignoredFiltersTable"); // NOI18N
        ignoredFiltersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(ignoredFiltersTable);
        ResourceMap resourceMap = Application.getInstance(TreeAnalyzerApp.class).getContext().getResourceMap(CompareTabPanel.class);
        ignoredFiltersTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("ignoredFiltersTable.columnModel.title0")); // NOI18N
        ignoredFiltersTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("ignoredFiltersTable.columnModel.title1")); // NOI18N
        ignoredFiltersTable.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(dataFieldsComboBox));

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        ActionMap actionMap = Application.getInstance(TreeAnalyzerApp.class).getContext().getActionMap(CompareTabPanel.class, this);
        jButton1.setAction(actionMap.get("applyAction")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        leftModelComboBox.setName("leftModelComboBox"); // NOI18N
        leftModelComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                leftModelComboBoxActionPerformed(evt);
            }
        });

        rightModelComboBox.setName("rightModelComboBox"); // NOI18N
        rightModelComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                rightModelComboBoxActionPerformed(evt);
            }
        });

        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        leftRulesTable.setAutoCreateRowSorter(true);
        leftRulesTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Rule", "Class", "No. instances"
            }
        ) {
            Class[] types = new Class [] {
                Integer.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        leftRulesTable.setName("leftRulesTable"); // NOI18N
        leftRulesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(leftRulesTable);
        leftRulesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("leftRulesTable.columnModel.title0")); // NOI18N
        leftRulesTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("leftRulesTable.columnModel.title1")); // NOI18N
        leftRulesTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("leftRulesTable.columnModel.title2")); // NOI18N
        leftRulesTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("leftRulesTable.columnModel.title3")); // NOI18N

        jSplitPane1.setLeftComponent(jScrollPane2);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        rightRulesTable.setAutoCreateRowSorter(true);
        rightRulesTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Rule", "Class", "No. instances"
            }
        ) {
            Class[] types = new Class [] {
                Integer.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rightRulesTable.setName("rightRulesTable"); // NOI18N
        rightRulesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(rightRulesTable);
        rightRulesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("rightRulesTable.columnModel.title0")); // NOI18N
        rightRulesTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("rightRulesTable.columnModel.title1")); // NOI18N
        rightRulesTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("rightRulesTable.columnModel.title2")); // NOI18N
        rightRulesTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("rightRulesTable.columnModel.title3")); // NOI18N

        jSplitPane1.setRightComponent(jScrollPane3);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
                    .addComponent(jLabel1, Alignment.LEADING)
                    .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 314, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(leftModelComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED, 799, Short.MAX_VALUE)
                        .addComponent(rightModelComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(leftModelComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightModelComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void leftModelComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_leftModelComboBoxActionPerformed
        applyAction();
    }//GEN-LAST:event_leftModelComboBoxActionPerformed

    private void rightModelComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_rightModelComboBoxActionPerformed
        applyAction();
    }//GEN-LAST:event_rightModelComboBoxActionPerformed

    private void postInitComponents() {
        app.getController().addModelChangeListener(new ModelChangeListener() {
            @Override
            public void modelChanged(ModelChangeEvent e) {
                if ( ModelChangeEvent.MODEL_REMOVED != e.getType() ) {
                    dataFieldsComboBox.setModel(new DefaultComboBoxModel(
                            app.getController().getDataFieldNames()));

                    leftModelComboBox.setModel(new DefaultComboBoxModel(app.getController().getEnabledTreeModelsItems()));
                    rightModelComboBox.setModel(new DefaultComboBoxModel(app.getController().getEnabledTreeModelsItems()));
                }
            }
        });

        app.getController().addAliasChangeListener(new AliasChangeListener() {
            @Override
            public void aliasChanged(AliasChangeEvent e) {
                applyAction();
            }
        });

        dataFieldsComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedDataField = (String)dataFieldsComboBox.getSelectedItem();
                selectedDataField = null != selectedDataField ? selectedDataField : "";
                if ( !"".equals(selectedDataField)
                        && ignoredFiltersTable.getSelectedRow() == ignoredFiltersTable.getModel().getRowCount() - 1 )
                {
                    ((DefaultTableModel)ignoredFiltersTable.getModel()).addRow(new Object[] {false, ""});
                }
            }
        });

//        leftModelComboBox.setModel(new DefaultComboBoxModel(createComboBoxItems(app.getC)TreeModelsItems
//                app.getController().getEnabledTreeModelsItems(
//                        ((TreeAnalyzerView)app.getMainView()).getOverviewTableModel())));
//        rightModelComboBox.setModel(new DefaultComboBoxModel(
//                app.getController().getEnabledTreeModelsItems(
//                        ((TreeAnalyzerView)app.getMainView()).getOverviewTableModel())));
    }

    @Action
    public void applyAction() {
        String leftTreeModelId = (String)((ComboBoxItem)leftModelComboBox.getSelectedItem()).getValue();
        String rightTreeModelId = (String)((ComboBoxItem)rightModelComboBox.getSelectedItem()).getValue();
//        app.getController().compareTreeModels(leftTreeModelId, rightTreeModelId
//                , (DefaultTableModel)leftRulesTable.getModel()
//                , (DefaultTableModel)rightRulesTable.getModel()
//                , (DefaultTableModel)ignoredFiltersTable.getModel());

        DecimalFormat format = new DecimalFormat("#,##0.0#");
        DecisionTreeModel leftTreeModel = app.getController().getTreeModel(leftTreeModelId);
        DecisionTreeModel rightTreeModel = app.getController().getTreeModel(rightTreeModelId);

        Set<String> ignoredDataFields = getIgnoredDataFields();
        Set<Rule> leftIntersection = leftTreeModel.getRulesIntersection(rightTreeModel.getRules(), ignoredDataFields);
        Set<Rule> rightIntersection = rightTreeModel.getRulesIntersection(leftTreeModel.getRules(), ignoredDataFields);

        DefaultTableModel leftRulesTableModel = (DefaultTableModel)leftRulesTable.getModel();
        DefaultTableModel rightRulesTableModel = (DefaultTableModel)rightRulesTable.getModel();

        leftRulesTableModel.setRowCount(0);
        rightRulesTableModel.setRowCount(0);
        int i = 0;
        for ( Rule rule : leftIntersection ) {
            i++;
            leftRulesTableModel.addRow(new Object[] {i, rule.getExpression()
                    , app.getController().getClassValueAlias(rule.getScore())
                    , format.format(rule.getScoreRecordCount())});
        }

        i = 0;
        for ( Rule rule : rightIntersection ) {
            i++;
            rightRulesTableModel.addRow(new Object[] {i, rule.getExpression()
                    , app.getController().getClassValueAlias(rule.getScore())
                    , format.format(rule.getScoreRecordCount())});
        }
    }

    private Set<String> getIgnoredDataFields() {
        DefaultTableModel ignoredDataFieldsTableModel = (DefaultTableModel)ignoredFiltersTable.getModel();
        Set<String> ignoredDataFields = new HashSet<String>();
        for ( int i=0; i<ignoredDataFieldsTableModel.getRowCount(); i++ ) {
            if ( (Boolean)ignoredDataFieldsTableModel.getValueAt(i, 0) ) {
                ignoredDataFields.add((String)ignoredDataFieldsTableModel.getValueAt(i, 1));
            }
        }
        return ignoredDataFields;
    }

//    public void updateModels() {
//        dataFieldsComboBox.setModel(new DefaultComboBoxModel(app
//                .getController().getDataFieldNames(
//                        ((TreeAnalyzerView) app.getMainView())
//                                .getOverviewTableModel())));
//        leftModelComboBox.setModel(new DefaultComboBoxModel(app.getController()
//                .getEnabledTreeModelsItems(
//                        ((TreeAnalyzerView) app.getMainView())
//                                .getOverviewTableModel())));
//        rightModelComboBox.setModel(new DefaultComboBoxModel(app
//                .getController().getEnabledTreeModelsItems(
//                        ((TreeAnalyzerView) app.getMainView())
//                                .getOverviewTableModel())));
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JComboBox dataFieldsComboBox;
    private JTable ignoredFiltersTable;
    private JButton jButton1;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JSplitPane jSplitPane1;
    private JComboBox leftModelComboBox;
    private JTable leftRulesTable;
    private JComboBox rightModelComboBox;
    private JTable rightRulesTable;
    // End of variables declaration//GEN-END:variables

}
